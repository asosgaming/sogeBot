

upstream sogeBot_botname {
    server https://127.0.0.1:20000;
    #server host.domain.com:20000;
}

proxy_cache_path /var/cache/nginx/sogebot/proxy_cache levels=1:2 keys_zone=sogebot:10m max_size=10g inactive=365d use_temp_path=off;
proxy_cache_key "$request_method$host$request_uri";

server {
    server_name host.domain.com;
    client_max_body_size    100M;
    #include /etc/nginx/static_content.conf;

    location / {

        include proxy_params;
            proxy_pass http://sogeBot_botname;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_redirect off;

        #cache settings
            proxy_cache sogebot;
            proxy_cache_revalidate on;
            proxy_cache_min_uses 1;
            proxy_cache_background_update on;
            proxy_cache_lock on;
            add_header X-Cache-Status $upstream_cache_status;
            proxy_ignore_headers Cache-Control;
            proxy_cache_valid any 365d;
            proxy_headers_hash_max_size 512;
            proxy_headers_hash_bucket_size 128;

    }

    location /socket.io/ {

        #EXPERIMENTAL CACHE SETTING
        #DO NOT USE
        proxy_cache sogebot;
        proxy_cache_revalidate on;
        proxy_cache_min_uses 1;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        add_header X-Cache-Status $upstream_cache_status;
        proxy_ignore_headers Cache-Control;
        proxy_cache_valid any 365d;

        proxy_pass http://sogeBot_botname;
        include proxy_params;
        proxy_buffering on;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_redirect off;
        # enable WebSockets
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_headers_hash_max_size 512;
        proxy_headers_hash_bucket_size 128;

    }

    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/host.domain.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/host.domain.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}


server {
    if ($host = host.domain.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name host.domain.com;
    listen 80;
    listen [::]:80;
        return 404; # managed by Certbot


}
